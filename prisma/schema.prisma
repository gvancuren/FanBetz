generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String         @unique
  isCreator       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  profileImage    String?
  bio             String?
  password        String?
  monthlyPrice    Int?
  weeklyPrice     Int?
  earnings        Int            @default(0)
  payoutTotal     Int            @default(0)
  stripeAccountId String?
  monthlyPriceId  String?
  stripeProductId String?
  weeklyPriceId   String?
  comments        Comment[]
  followingList   Follow[]       @relation("Following")
  followersList   Follow[]       @relation("Followers")
  picks           Pick[]
  posts           Post[]
  postLikes       PostLike[]
  postUnlocks     PostUnlock[]
  subscribers     Subscription[] @relation("Creator")
  subscriptions   Subscription[] @relation("Subscriber")
}

model Follow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Following", fields: [followerId], references: [id])
  following   User @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id        Int          @id @default(autoincrement())
  content   String
  imageUrl  String?
  createdAt DateTime     @default(now())
  userId    Int
  price     Int?
  title     String
  category  Category?
  comments  Comment[]
  user      User         @relation(fields: [userId], references: [id])
  likes     PostLike[]
  unlocks   PostUnlock[]
}

model Pick {
  id         Int      @id @default(autoincrement())
  sport      String
  teams      String
  market     String
  prediction String
  createdAt  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

model PostUnlock {
  id     Int  @id @default(autoincrement())
  userId Int
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Subscription {
  id                   Int      @id @default(autoincrement())
  creatorId            Int
  createdAt            DateTime @default(now())
  plan                 String
  subscriberId         Int
  expiresAt            DateTime
  stripeSubscriptionId String?
  price                Int
  creator              User     @relation("Creator", fields: [creatorId], references: [id])
  subscriber           User     @relation("Subscriber", fields: [subscriberId], references: [id])

  @@unique([subscriberId, creatorId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@map("PostLike")
}

enum Category {
  NFL
  NBA
  MLB
  NHL
  UFC
  Soccer
  Golf
  NCAA
}
